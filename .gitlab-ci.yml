stages:
  - base
  - push-base
  - build
  - test
  - docs
  - deploy

.job:
  timeout: 1h
  before_script:
    - "[ -f /etc/alpine-release ] && apk add git coreutils"
    - echo -e "section_start:`date +%s`:pre-env\r\e[0KEnvironment info (before_script)"
    - env
    - ls -al
    - find -maxdepth 1 -print0 | xargs -0 du -bhs
    - echo -e "section_end:`date +%s`:pre-env\r\e[0K"
    - echo -e "section_start:`date +%s`:setup\r\e[0KSetup"
    - echo -e "machine ${CI_SERVER_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
    - mkdir -p .stack-work.deps
    - |
      echo <<EOF >../.dockerignore
      *
      !blaze
      !binary-analysis
      !haskell-binja
      !binja-header-cleaner
      **/.git/
      **/.gitlab-ci.yml
      **/Dockerfile*
      **/.stack/
      **/.stack-work/
      **/.stack-work.deps/
      **/*.cabal
      EOF
    - |
      for project in binary-analysis haskell-binja binja-header-cleaner; do
        rm -rf "../$project"
        git clone --depth=1 "${CI_REPOSITORY_URL%/*}/$project.git" "../$project"
        (
          cd "../$project" >/dev/null
          mkdir -p ../blaze/.stack-work.deps/"$project"
          ln -sf ../blaze/.stack-work.deps/"$project" .stack-work
          ls -al "../$project"
        )
      done
    - echo -e "section_end:`date +%s`:setup\r\e[0K"
  after_script:
    - echo -e "section_start:`date +%s`:post-env\r\e[0KEnvironment info (after_script)"
    - ls -al
    - find -maxdepth 1 -print0 | xargs -0 du -bhs
    - echo -e "section_end:`date +%s`:post-env\r\e[0K"

.haskell-job:
  extends: .job
  #image: ${CI_REGISTRY}/blaze/blaze-system/haskell-binaryninja-base:ci
  image: ${CI_REGISTRY}/blaze/blaze/blaze-base:${CI_COMMIT_REF_SLUG}
  tags:
    - dind
  variables:
  #  STACK_ROOT: ${CI_PROJECT_DIR}/.stack
    CACHE_FALLBACK_KEY: ${CI_DEFAULT_BRANCH}
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      #- .stack/
      - .stack-work/
      - .stack-work.deps/

base:
  extends: .job
  timeout: 1h
  stage: base
  image: docker:dind
  tags:
    - dind
  # rules:
  #   - if: $CI_COMMIT_REF_NAME == "haddock"
  #     changes:
  #       - "**/Dockerfile*"
  #       - "**/.gitlab-ci.yml"
  #       - "**/stack.yaml"
  #       - "**/stack.yaml.lock"
  #       - "**/package.yaml"
  #       - "**/*.cabal"
  script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - '[ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ] && tag=latest || tag="$CI_COMMIT_REF_SLUG"'
    - image="${CI_REGISTRY}/blaze/blaze/blaze-base"
    - 'docker pull "${image}:${tag}" || docker pull "${image}:latest" || echo "Missing from docker registry: ${image}:${tag}, ${image}:latest"'
    - docker build --pull -t "${image}:${tag}" .. -f Dockerfile.base
    - docker push "${image}:${tag}"

build:
  extends: .haskell-job
  stage: build
  script:
    #- "( cd ../haskell-binja && make header && git diff --stat; )"
    - stack build

test:
  extends: .haskell-job
  stage: test
  script:
    - stack test

pages:
  extends: .haskell-job
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "haddock"
    - when: manual
  script:
    - stack haddock
    - cp -arT "$(stack path --snapshot-doc-root)" public
  allow_failure: true
  artifacts:
    paths:
      - public
