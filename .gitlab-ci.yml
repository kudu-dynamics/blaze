stages:
  - lint
  - build
  - test
  - push
  - docs
  - trigger

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS == null
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG

# Not making these global variables because they would get overridden in multi-project pipelines
.variables: &variables
  # The base of this repo's docker registry
  REPO_DOCKER_REGISTRY: ${CI_REGISTRY_IMAGE}
  # The image name of binaryninja-haskell image
  BLAZE_BINARYNINJA_HASKELL_IMAGE:
    ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/binaryninja-haskell/binaryninja-haskell
  # Enable buildkit for more efficient layer caching
  DOCKER_BUILDKIT: "1"

# Potential build dependencies for the dind host
.script-bootstrap-dind: &script-bootstrap-dind
  - echo -e "section_start:`date +%s`:bootstrap[collapsed=true]\r\e[0KBootstrap build dependencies"
  - |
    if [ -f /etc/alpine-release ]; then
      apk add git coreutils python3
      apk add -X http://dl-cdn.alpinelinux.org/alpine/edge/testing time
    fi
  - echo -e "section_end:`date +%s`:bootstrap\r\e[0K"

.job:
  timeout: 1h
  variables:
    <<: *variables
  before_script: &job-before-script
    - echo -e "section_start:`date +%s`:pre-env[collapsed=true]\r\e[0KEnvironment info (before_script)"
    - uname -a
    - env
    - ls -al
    - find . -maxdepth 1 \( ! -name . \) -print0 | sort -z | xargs -0 -x du -bhsc
    - df -h
    - date -Iseconds
    - |
      if type git >/dev/null; then
        pushd "$BLAZE_BINJA_API" >/dev/null && \
          { git log --color --decorate HEAD^..HEAD | cat || true;
            popd >/dev/null;
          } || true
      fi
    - |
      if type python3 >/dev/null; then
        python3 -c 'import binaryninja; print(binaryninja.core_version())' || true
      fi
    - echo -e "section_end:`date +%s`:pre-env\r\e[0K"

.docker-job:
  extends: .job
  image: docker:dind
  before_script:
    - *script-bootstrap-dind
    - *job-before-script
    - docker login -u "${CI_REGISTRY_USER}" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"

.haskell-job:
  extends: .job
  image: ${REPO_DOCKER_REGISTRY}/blaze:pipeline-${CI_PIPELINE_IID}

lint:
  stage: lint
  extends: .job
  image: ${BLAZE_BINARYNINJA_HASKELL_IMAGE}
  needs: []
  script:
    - hlint --color=always src test demo
  allow_failure: true

build:
  stage: build
  extends: .docker-job
  needs: []
  script:
    - image=${REPO_DOCKER_REGISTRY}/blaze
    - docker pull "${image}:latest" || true
    - docker build --pull . -f Dockerfile
      --build-arg "CI_REGISTRY=${CI_REGISTRY}"
      --build-arg "CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE}"
      -t "${image}:pipeline-${CI_PIPELINE_IID}"
    - docker push "${image}:pipeline-${CI_PIPELINE_IID}"

test:
  stage: test
  extends: .haskell-job
  needs:
    - build
  variables:
    <<: *variables
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - cd /blaze/build/blaze
    - STACK_TEST_TIMEOUT=1800 .ci/scripts/run_stack_test.py

push:latest:
  stage: push
  extends: .docker-job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - test
  variables:
    <<: *variables
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - image=${REPO_DOCKER_REGISTRY}/blaze
    - docker pull "${image}:pipeline-${CI_PIPELINE_IID}"
    - docker tag "${image}:pipeline-${CI_PIPELINE_IID}" "${image}:latest"
    - docker push "${image}:latest"

push:tag:
  stage: push
  extends: .docker-job
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - test
  variables:
    <<: *variables
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - image=${REPO_DOCKER_REGISTRY}/blaze
    - docker pull "${image}:pipeline-${CI_PIPELINE_IID}"
    - docker tag "${image}:pipeline-${CI_PIPELINE_IID}" "${image}:tag-${CI_COMMIT_TAG}"
    - docker push "${image}:tag-${CI_COMMIT_TAG}"

pages:
  extends: .haskell-job
  stage: docs
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_MERGE_REQUEST_ID == null
      when: on_success
    - if: $CI_MERGE_REQUEST_ID == null
      when: manual
  needs:
    - test
  variables:
    <<: *variables
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - haddock_flags=(--no-haddock-deps)
    - pushd /blaze/build/blaze
    - stack haddock "${haddock_flags[@]}"
    - docs_dir=$(stack path --snapshot-doc-root "${haddock_flags[@]}")
    - popd
    # - cp -arT "$docs_dir" public
    - mkdir public
    - touch public/index.html
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 12 hours

trigger-blaze-ui:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: trigger
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine
  script:
    - apk add curl jq
    - curl --fail-with-body
        -X POST
        -F token="${CI_JOB_TOKEN}"
        -F ref=master
        "${CI_API_V4_URL}"/projects/"$(jq -rn --arg x "${CI_PROJECT_NAMESPACE}/blaze-ui" '$x|@uri')"/trigger/pipeline

cleanup:
  stage: .post
  when: always
  extends: .docker-job
  variables:
    GIT_STRATEGY: none
  script:
    - apk add --no-cache --update bash
    - "# Untag all images created by this pipeline so we don't waste space on CI runner"
    - |
      bash -c '
        images=(${REPO_DOCKER_REGISTRY}/blaze)
        tags=()
        for image in "${images[@]}"; do
          tags+=(
            "${image}:pipeline-${CI_PIPELINE_IID}"
            "${CI_COMMIT_TAG:+${image}:tag-${CI_COMMIT_TAG}}"
            )
        done
        for i in "${!tags[@]}"; do if [ -z "${tags[$i]}" ]; then unset tags[$i]; fi; done
        echo "${tags[@]}"
        docker image rm "${tags[@]}" || true
      '
