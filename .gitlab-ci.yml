stages:
  - deps
  - build
  - test
  - docs
  - deploy

variables:
  CACHE_FALLBACK_KEY: ${CI_DEFAULT_BRANCH}

cache:
  key: ${CI_COMMIT_REF_SLUG}

.haskell-job: &haskell-job
  image: ${CI_REGISTRY}/blaze/blaze/blaze-deps
  tags:
    - dind
  variables:
    STACK_ROOT: ${CI_PROJECT_DIR}/.stack
  cache:
    paths:
      - .stack/

before_script:
  - echo -e "machine ${CI_SERVER_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
  - apt update && apt install -y git
  - |
    for project in binary-analysis haskell-binja binja-header-cleaner; do
      rm -rf "../$project"
      git clone --depth=1 ${CI_REPOSITORY_URL%/*}/"$project" "../$project"
    done

deps:
  <<: *haskell-job
  image: docker:dind
  stage: deps
  script:
    - docker pull ${CI_REGISTRY}/blaze/blaze/blaze-deps || true
    - docker build .. -f ./Dockerfile -t ${CI_REGISTRY}/blaze/blaze/blaze-deps
    - docker push ${CI_REGISTRY}/blaze/blaze/blaze-deps

build:
  <<: *haskell-job
  stage: build
  needs:
    - job: deps
      artifacts: false
  script: |
    stack build
  artifacts:
    paths:
      - .stack/
      # - .stack-work/
    exclude:
      - .stack/programs/

docs:
  <<: *haskell-job
  stage: docs
  needs:
    - job: build
      artifacts: true
  script: |
    stack haddock
  artifacts:
    paths:
      - .stack/
      # - .stack-work/
    exclude:
      - .stack/programs/

pages:
  <<: *haskell-job
  stage: deploy
  needs:
    - job: docs
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "haddock" || $CI_PIPELINE_SOURCE == "trigger"'
  script: |
    cp -arT "`stack path --snapshot-doc-root`" public
  artifacts:
    paths:
      - public
