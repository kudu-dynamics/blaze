stages:
  - deps
  - build
  - test
  - docs
  - deploy

.job:
  before_script:
    - env
    - ls -al
    - ( shopt -s dotglob && du -bhs * )
    - echo -e "machine ${CI_SERVER_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
    - mkdir .stack-work.deps
    - |
      for project in binary-analysis haskell-binja binja-header-cleaner; do
        rm -rf "../$project"
        git clone --depth=1 ${CI_REPOSITORY_URL%/*}/"$project" "../$project"
        pushd "../$project" >/dev/null
        mkdir ../blaze/.stack-work.deps/"$project"
        ln -sf ../blaze/.stack-work.deps/"$project" .stack-work
        popd
      done
  after_script:
    - ls -al
    - ( shopt -s dotglob && du -bhs * )

.haskell-job:
  #image: ${CI_REGISTRY}/blaze/blaze/blaze-deps:${CI_COMMIT_REF_SLUG}
  extends: .job
  image: ${CI_REGISTRY}/blaze/blaze-system/haskell-binaryninja-base:ci
  tags:
    - dind
  variables:
    STACK_ROOT: ${CI_PROJECT_DIR}/.stack
    CACHE_FALLBACK_KEY: ${CI_DEFAULT_BRANCH}
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .stack/
      - .stack-work/
      - .stack-work.deps/

build:
  extends: .haskell-job
  stage: build
  #needs: ["deps"]
  script:
    - stack build

test:
  extends: .haskell-job
  stage: test
  needs: ["build"]
  script:
    - stack test
  allow_failure: true

pages:
  extends: .haskell-job
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: manual
  script:
    - stack haddock
    - cp -arT "$(stack path --snapshot-doc-root)" public
  artifacts:
    paths:
      - public
