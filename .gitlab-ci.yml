stages:
  - base
  - push-base
  - build
  - test
  - docs
  - deploy

# FIXME it would be _nice_ if we could run branch pipelines _until_ branches become MRs, in which
# case we run MR pipelines. Cf. https://gitlab.com/gitlab-org/gitlab/-/issues/34756#note_282820625
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_MERGE_REQUEST_ID == null
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  REPO_DOCKER_REGISTRY: ${CI_REGISTRY_IMAGE}
  GROUP_DOCKER_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}

.job:
  timeout: 1h
  before_script:
    - "[ -f /etc/alpine-release ] && apk add git coreutils"
    - echo -e "section_start:`date +%s`:pre-env\r\e[0KEnvironment info (before_script)"
    - env
    - ls -al || true  # FIXME see coreutils issue
    - find -maxdepth 1 -print0 | xargs -0 -n1 du -bhs
    - echo -e "section_end:`date +%s`:pre-env\r\e[0K"
    - echo -e "section_start:`date +%s`:setup\r\e[0KSetup"
    - echo -e "machine ${CI_SERVER_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
    - mkdir -p .stack-work.deps
    - |
      cat <<EOF >../.dockerignore
      *

      !blaze
      !binaryninja-haskell
      !binary-analysis

      **/.git
      **/.gitlab-ci.yml

      **/.stack
      **/.stack-work*

      **/*.cabal

      **/dist-newstyle
      **/dist

      **/Dockerfile*
      **/.dockerignore
      EOF
    - |
      for project in binary-analysis binaryninja-haskell; do
        rm -rf "../$project"
        git clone --depth=1 "${CI_REPOSITORY_URL%/*}/$project.git" "../$project"
        (
          cd "../$project" >/dev/null
          mkdir -p ../blaze/.stack-work.deps/"$project"
          ln -sf ../blaze/.stack-work.deps/"$project" .stack-work
          ls -al "../$project" || true  # FIXME see coreutils issue
        )
      done
    - echo -e "section_end:`date +%s`:setup\r\e[0K"
  after_script:
    - echo -e "section_start:`date +%s`:post-env\r\e[0KEnvironment info (after_script)"
    - ls -al || true  # FIXME see coreutils issue
    - find -maxdepth 1 -print0 | xargs -0 -n1 du -bhs
    - echo -e "section_end:`date +%s`:post-env\r\e[0K"

.haskell-job:
  extends: .job
  #image: ${CI_REGISTRY}/blaze/blaze-system/haskell-binaryninja-base:ci
  image: ${REPO_DOCKER_REGISTRY}/blaze-base:commit-${CI_COMMIT_SHA}
  tags:
    - dind
  variables:
  #  STACK_ROOT: ${CI_PROJECT_DIR}/.stack
    CACHE_FALLBACK_KEY: ${CI_DEFAULT_BRANCH}
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      #- .stack/
      - .stack-work/
      - .stack-work.deps/

Build base image:
  extends: .job
  stage: base
  image: docker:dind
  tags:
    - dind
  # rules:
  #   - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  #     changes:
  #       - "**/Dockerfile*"
  #       - "**/.gitlab-ci.yml"
  #       - "**/stack.yaml"
  #       - "**/stack.yaml.lock"
  #       - "**/package.yaml"
  #       - "**/*.cabal"
  script:
    - git ls-files --others
    - docker login -u "${CI_REGISTRY_USER}" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker pull "${REPO_DOCKER_REGISTRY}/blaze-base:latest" || true
    - docker pull "${REPO_DOCKER_REGISTRY}/blaze-base:branch-${CI_COMMIT_REF_SLUG}" || true
    - docker build --pull .. -f Dockerfile.base
      --build-arg DEVOPS_DOCKER_REGISTRY=${GROUP_DOCKER_REGISTRY}/devops
      -t "${REPO_DOCKER_REGISTRY}/blaze-base:commit-${CI_COMMIT_SHA}"
      -t "${REPO_DOCKER_REGISTRY}/blaze-base:branch-${CI_COMMIT_REF_SLUG}"
    - docker push "${REPO_DOCKER_REGISTRY}/blaze-base:commit-${CI_COMMIT_SHA}"
    - docker push "${REPO_DOCKER_REGISTRY}/blaze-base:branch-${CI_COMMIT_REF_SLUG}"

Push latest base image:
  stage: push-base
  extends: .job
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    GIT_STRATEGY: none
  script:
    - docker pull "${REPO_DOCKER_REGISTRY}/blaze-base:commit-${CI_COMMIT_SHA}"
    - docker tag "${REPO_DOCKER_REGISTRY}/blaze-base:commit-${CI_COMMIT_SHA}" "${REPO_DOCKER_REGISTRY}/blaze-base:latest"
    - docker push "${REPO_DOCKER_REGISTRY}/blaze-base:latest"

build:
  extends: .haskell-job
  stage: build
  script:
    #- "( cd ../haskell-binja && make header && git diff --stat; )"
    - stack build

test:
  extends: .haskell-job
  stage: test
  script:
    - stack test
  allow_failure: true

pages:
  extends: .haskell-job
  stage: deploy
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
  script:
    - stack haddock
    - cp -arT "$(stack path --snapshot-doc-root)" public
  allow_failure: true
  artifacts:
    paths:
      - public
